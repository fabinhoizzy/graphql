let createServer,readFile,resolve,parse;_a24‍.w("http",[["createServer",["createServer"],function(v){createServer=v}]]);_a24‍.w("fs",[["readFile",["readFile"],function(v){readFile=v}]]);_a24‍.w("path",[["resolve",["resolve"],function(v){resolve=v}]]);_a24‍.w("querystring",[["parse",["parse"],function(v){parse=v}]]);




const server = createServer( (request, response) => {
    switch(request.url) {
        case '/status' : {
            response.writeHead(200, {
                'Content-Type' : 'application/json',
            });
            response.write(
                JSON.stringify({
                    status: 'Okay',
                })
            );
            response.end();
            break;
        }

        case '/sign-in' : {
            const path = resolve(__dirname, './pages/sign-in.html');
            readFile(path, (error, file) => {
                if(error){
                response.writeHead(500, 'Can\'t process HTML file.');
                response.end();
                return;
                }

                response.writeHead(200);
                response.write(file);
                response.end();
            });
            break;
        }
        case '/home' : {
            const path = resolve(__dirname, './pages/home.html');
            readFile(path, (error, file) => {
                if(error){
                response.writeHead(500, 'Can\'t process HTML file.');
                response.end();
                return;
                }

                response.writeHead(200);
                response.write(file);
                response.end();
            });
            break;
        }
        case '/authenticate': {
            const params = parse(data);
            request.on('data', (chunk) => {
                data += chunk;
            });
            request.on('end', () => {
                response.writeHead(301, {
                    Location: '/home',
                });
                response.end();
            });
            break;
        }

        default: {
            response.writeHead(404, 'Server not found.');
            response.end();       
        }
    }
});

const PORT = process.env.PORT ? parseInt(orocess.env.PORT) : 8000;
const HOSTNAME = process.env.PORT || '127.0.0.1';

server.listen(8000, '127.0.0.1', () => {
    console.log(`Server is listening as http://127.0.0.1:${PORT}.`);
});